'use client';

import type { Book } from '../../mocks/types';
import { useEffect, useState } from 'react';

export default function Home() {
  const [books, setBooks] = useState<Book[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchBooks = async () => {
      try {
        setLoading(true);
        setError(null);

        const booksResponse = await fetch('/books');

        if (!booksResponse.ok) {
          throw new Error('Failed to fetch books');
        }

        const booksData = await booksResponse.json();
        setBooks(booksData);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred');
      } finally {
        setLoading(false);
      }
    };

    fetchBooks();
  }, []);

  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-lg">Loading books...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-lg text-red-500">
          Error:
          {error}
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="mx-auto max-w-4xl">
        <h1 className="mb-8 text-center text-3xl font-bold">Books</h1>

        {/* Books Section */}
        <div className="rounded-lg bg-white p-6 shadow-md">
          <h2 className="mb-4 text-2xl font-semibold">Books Data (from /books)</h2>
          {books.length > 0
            ? (
                <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                  {books.map((book, index) => (
                    <div key={index} className="rounded-lg border border-gray-200 p-4 shadow-sm">
                      <img
                        src={book.imageUrl}
                        alt={book.title}
                        className="mb-3 h-48 w-full rounded object-cover"
                      />
                      <h3 className="mb-2 text-lg font-semibold text-gray-800">{book.title}</h3>
                      <p className="line-clamp-3 text-sm text-gray-600">{book.description}</p>
                    </div>
                  ))}
                </div>
              )
            : (
                <div className="text-gray-500">No books found</div>
              )}
        </div>

        {/* Test Instructions */}
        <div className="mt-8 rounded-lg bg-blue-50 p-6">
          <h3 className="mb-2 text-lg font-semibold">How to test:</h3>
          <ul className="list-inside list-disc space-y-1 text-sm text-gray-700">
            <li>Open browser DevTools â†’ Network tab</li>
            <li>Refresh the page and look for requests to /books endpoint</li>
            <li>Verify the data matches what's generated by Faker.js in handlers.ts</li>
            <li>Check that MSW is intercepting the requests (you should see them in the Network tab)</li>
            <li>Each refresh will show different fake data!</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
